/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 16:29:38 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.Post;
import com.ifi.service.PostServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/post", produces = "application/hal+json")
public class PostController {

	private static final Logger LOGGER = LoggerFactory.getLogger(PostController.class);

	private static final String NOT_FOUND ="Post not found";

	@Autowired
	private PostServiceImpl postService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Post> findAll() {
		List<Post> list = postService.findAll();
		return list;
	}


	@GetMapping("{id}")
	public Post get(@PathVariable("id") Integer id) {
		final Post post = postService.getOne(id);
		LOGGER.info("Post found : {}", post);
		return post;
	}

	@PostMapping(consumes = "application/json")
	public Post create(@RequestBody Post post) {
		LOGGER.info("Post creation request : {}", post);
		if (postService.exist(post)) {
			LOGGER.info("Post already exist ! : {}", post);
			return null;
		} else {
			final Post created = postService.create(post);
			LOGGER.info("Created post {}", created);
			return created;
		}
	}

	@PutMapping(value = "{id}", consumes = "application/json")
	public Post update(@PathVariable("id") Integer id, @RequestBody Post post) {
		return postService.update(post);
	}

	@DeleteMapping("{id}")
	public void delete(@PathVariable("id") Integer id) {
		LOGGER.info("Post deletion request : {}", resolveIdForLogger(id));
		if (postService.delete(id)) {
			LOGGER.info("Post succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer id) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(id));
		return ids.toString();
	}

}

