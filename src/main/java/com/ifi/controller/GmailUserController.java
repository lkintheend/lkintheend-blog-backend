/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 16:29:37 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.GmailUser;
import com.ifi.service.GmailUserServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/gmailUser", produces = "application/hal+json")
public class GmailUserController {

	private static final Logger LOGGER = LoggerFactory.getLogger(GmailUserController.class);

	private static final String NOT_FOUND ="GmailUser not found";

	@Autowired
	private GmailUserServiceImpl gmailUserService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<GmailUser> findAll() {
		List<GmailUser> list = gmailUserService.findAll();
		return list;
	}


	@GetMapping("{userProfileId}")
	public GmailUser get(@PathVariable("userProfileId") Integer userProfileId) {
		final GmailUser gmailUser = gmailUserService.getOne(userProfileId);
		LOGGER.info("GmailUser found : {}", gmailUser);
		return gmailUser;
	}

	@PostMapping(consumes = "application/json")
	public GmailUser create(@RequestBody GmailUser gmailUser) {
		LOGGER.info("GmailUser creation request : {}", gmailUser);
		if (gmailUserService.exist(gmailUser)) {
			LOGGER.info("GmailUser already exist ! : {}", gmailUser);
			return null;
		} else {
			final GmailUser created = gmailUserService.create(gmailUser);
			LOGGER.info("Created gmailUser {}", created);
			return created;
		}
	}

	@PutMapping(value = "{userProfileId}", consumes = "application/json")
	public GmailUser update(@PathVariable("userProfileId") Integer userProfileId, @RequestBody GmailUser gmailUser) {
		return gmailUserService.update(gmailUser);
	}

	@DeleteMapping("{userProfileId}")
	public void delete(@PathVariable("userProfileId") Integer userProfileId) {
		LOGGER.info("GmailUser deletion request : {}", resolveIdForLogger(userProfileId));
		if (gmailUserService.delete(userProfileId)) {
			LOGGER.info("GmailUser succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer userProfileId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(userProfileId));
		return ids.toString();
	}

}

